outer   lw 0 3 size     // $3 = arr.length
        lw 0 6 neg1     // load -1 to $6
        add 3 6 3       // $3 = arr.length -1
        beq 1 3 end     // if ( i == arr.length-1) end of outer loop
        add 0 0 2       // int j = 2
inner   lw 0 3 size     // $3 = arr.length
        lw 0 6 neg1     // load -1 to $6
        add 3 6 3       // $3 = arr.length -1
        nand 1 1 5      // $5 = ~i
        lw 0 6 one      // load 1 to $6
        add 5 6 5       // $5 = ~i +1 (-i)
        add 3 5 5       // $5 = arr.length -i -1
        beq 2 5 endIn   // if (j == arr.length -i -1) end of inner loop
        lw 2 3 arr      // $3 = a[j]
        lw 0 6 one      // load 1 to 6
        nand 3 3 3      // $3 = ~a[j]
        add 3 6 3       // $3 = ~a[j]+1 -> -a[j]
        add 0 2 4       // $4 = j
        add 4 6 4       // $4 = j+1
        lw 4 4 arr      // $4 = arr[j+1]
        add 4 3 5       // $5 = arr[j+1] - a[j]
        lw 0 6 maxNe
        nand 5 6 5
        nand 5 5 5
        beq 5 6 swap    //if arr[j+1] - a[j] is negative number ( a[j] > a[j+1]
endSwp  lw 0 6 one
        add 2 6 2
        beq 0 0 inner
endIn   lw 0 6 one      // load 1 to $6
        add 1 6 1       // i++
        beq  0 0 outer  // jump to check outer condition
end     halt
swap    lw 0 6 one      // load 1 to $6
        add 2 6 4       // $4 = j+1
        lw 4 5 arr      // temp = arr[j+1]
        lw 2 3 arr      // $3 = a[j]
        sw 4 3 arr      // a[j+1] = a[j]
        sw 2 5 arr      // a[j] = a[j+1]
        beq 0 0 endSwp
one .fill 1
neg1 .fill -1
maxNe .fill -2147483648
size .fill 7
arr .fill 64
arr1 .fill 34
arr2 .fill 25
arr3 .fill 12
arr4 .fill 22
arr5 .fill 11
arr6 .fill 90